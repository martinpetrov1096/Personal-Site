[
    {
        "key": 0,
        "title": "WhatToWatch",
        "description": "Deciding on a movie to watch at home has always been a struggle for me. And it’s even more difficult when you’re with friends and have to all agree on a movie. To use it, one person creates a lobby and shares the join code with friends. Everyone can then specify genres, minimum ratings, and the streaming apps they have to filter movies by. Then they are taken to a new screen and given movie suggestions that match their criteria which they can vote yes or no on. Users can see which movies were voted for most to help them decide on what to watch.",
        "tools": [
            "typescript",
            "react",
            "nodejs",
            "docker"
        ],
        "projectUrl": "https://whattowatch.martin-petrov.com",
        "githubUrl": "",
        "timelineItems": [
            {
                "key": 0,
                "title": "Designing",
                "description": [
                   "Shaping the design for WhatToWatch was a process driven by my enthusiasm for creating visually interesting interfaces. Though I’m definitely not a designer, I always try to come up with a visual design that excites me, as it always motivates me to finish the project. While exploring TheMovieDb API, I stumbled upon the fact that each movie had stunning artwork assets, which would work really well with a card-style UI.",
                   "The design also had to be mobile-friendly, as I envisioned using the app on my phone while in front of the TV. While a mobile app would have been nice, I didn’t want to waste resources on it that I didn’t have, so I settled on making it a Progressive Web App (PWA)."
                ],
                    
                "image": "project-images/whattowatch-1.png"
            },
            {
                "key": 1,
                "title": "Expanding Functionality",
                "description": [
                    "I drew inspiration from a project I developed during my Web Development course at UC Davis called Restaurant Tinder. The app would suggest nearby restaurants until all users in the same lobby all vote yes on a particular one.  However, the app had its limitations. A major drawback was the need for all users to wait until everyone had voted on a restaurant before the next option would load. This seemed inefficient and cumbersome. To address this, I opted to incorporate Redis as an in-session database. Now users could vote on movies on their own time, and see the number of votes for each one. I also added a results section where users could see the status of each movie they had already voted on.",
                    "I also wanted to provide users with more information if they were unsure of a movie. Now, if they clicked on the card, it would display movie ratings, reviews, and the cast."
                ],
                "image": "project-images/whattowatch-2.png"
            },
            {
                "key": 2,
                "title": "Improving Usability",
                "description": [
                  "In the initial stages of app development, I found the first version falling short of my expectations in terms of utility. The multiplayer functionality, while well-implemented, proved less relevant for my predominantly solo use. However, the biggest issue was the sluggish user experience. Swiping on one movie at a time was just too time consuming. The solution came in the form of \"Overview Mode,\" a feature that presented all movie suggestions in a convenient grid view. Now users could glance through all movies at once, and compare them much quicker than they could before."
                ],
                "image": "project-images/whattowatch-3.png"
            }
        ]
    },
    {
        "key": 1,
        "title": "Davis Deals",
        "description": "Davis Deals was a collaborative endeavor with my friend Jackie. Drawing from the lessons learned in my previous projects, I recognized the tendency to underestimate project timelines. To keep the scope manageable and deliver within a weekend timeframe, we decided to create a simple website showcasing local Food & Drink deals in Davis, California—our then place of residence.",
        "projectUrl": "https://martinpetrov1096.github.io/davis-deals/",
        "tools": [
            "typescript",
            "react"
         ],
        "timelineItems": [
            {
                "key": 0,
                "title": "Designing",
                "description": [
                    "In the design phase, our goal was to create a visually appealing and easily navigable platform. Inspired by the simplicity of a cocktail menu, we opted for a minimalist design that prioritized readability. Every element, from the bicycle icon (a nod to Davis's bicycle-friendly reputation) to the hamburger and cocktail drink icons, was designed from scratch using Figma. We added some flair to the website by switching between a light and dark theme for the food and drink sections."
                ],
                "image": "project-images/davisdeals-1.png"
            },
            {
                "key": 1,
                "title": "Implementation Tradeoffs",
                "description": [
                    "With the goal of completing this project within a weekend, we faced the decision of whether to incorporate a backend for user-generated deal postings. While the concept had its appeal, the potential complexity and hosting considerations outweighed the benefits. Our primary concern wasn't writing the backend code; rather, it was the potential challenges associated with hosting, particularly considering the intermittent nature of personal servers. To streamline the process and ensure hassle-free hosting, we opted for a static web page approach, leveraging a JSON config file to manage restaurant data. This decision paid off, as we managed to complete the entire project within 2 days."
                ],
                "image": "project-images/davisdeals-2.png"
            }
        ]
    },
    {
        "key": 2,
        "title": "Secret",
        "description": "In my computer security class, we read one paper in particular that peaked my interest. A group of researchers had the goal of protecting secrets within a compromised computer. So a user could enter in their passwords, credit cards, or any other sensitive data without fear of a keylogger, screen reader, or any other malware from being able to intercept the data. Approaching a security problem with the mindset of everything being compromised was fascinating to me. For our final project, we decided to  approach the same problem in a different manner to remedy some of the limitations of the original paper.",
        "tools": [
            "typescript",
            "react",
            "nodejs",
            "docker",
            "dot-net"
         ],
        "timelineItems": [
            {
                "key": 0,
                "title": "Fidelius’s Approach",
                "description": [
                    "The following is a huge oversimplification of the original paper:  “Fidelius: Protecting User Secrets from Compromised Browsers” published in IEEE. I would strongly suggest reading it if you have any questions about the authors’ implementation, as it is fascinating and quite hard to summarize in a paragraph. However, I will still give it my best shot.",
                    "The Fidelius team decided to rely on the hardware secure enclave inside most modern SoC’s. When a browser came across a “secure form” (indicated by a custom attribute on an html form), the keyboard would enter a “secure” mode (indicated by an led on the raspberry pi between the computer and they keyboard), and any keypresses would be encrypted and passed to the enclave. The form would then be sent out from within the enclave, keeping the secrets within it. "
                ],
                "image": "project-images/secret-1.gif"
            },
            {
                "key": 1,
                "title": "Our Architecture",
                "description": [
                    "Our approach was based on a simple concept: It’s impossible to steal user secrets if they were never on the compromised system itself. Obviously we would still need something that we could trust is secure, and we chose an external Raspberry Pi rather than the enclave within the compromised system. The Pi would be set up as a man in the middle proxy, so all requests from the compromised computer would be routed through it. Let’s say a user is trying to login to a website on the compromised computer. Rather than entering in their username and password in the login screen, our browser extension would generate a token for each. After the user clicks “login”, the Pi would parse through all network requests made and search for the token, and replace it with the proper credentials. This had 3 distinct advantages compared to Fidelius:",
                    "1. The compromised system wasn’t vulnerable to man in the middle attacks, since we still had the network proxy that we could trust had valid root certificates",
                    "2. Because we were handling the token switching on a packet level, there didn’t have to be any changes made to existing websites to work with our implementation today.",
                    "3. The compromised device didn’t need to support a secure enclave"
                ],
                "image": "project-images/secret-2.png"
            }
        ]
    },
    {
        "key": 3,
        "title": "Portfolio Website",
        "description": "You’re currently looking at it. I really wanted to create a portfolio that was unique, and that makes me stand out. I’m currently on the 3rd major revision to it, and I’m sure I’ll keep finding more ways to improve over time. ",
        "tools": [
            "typescript",
            "react"
         ],
         "image": "project-images/portfoliosite.png"
    },
    {
        "key": 4,
        "title": "Restaurant Tinder",
        "description": "This was my final project for my web development class. As mentioned previously, it was the inspiration for WhatToWatch, and you can notice a lot of similarities between the two. We wrote the backend in NodeJs, and the frontend in VueJs.",
        "tools": [
            "javascript",
            "vuejs"
         ],
         "image": "project-images/resttinder.png"
    },
    {
        "key": 5,
        "title": "AI API",
        "description": "A website that would allow developers to integrate any tensorflow ml model into their workflow through simple API requests. The website would let users use any models uploaded by other users, and let them upload their own. Then they could use the model by making an API request, rather than to have to figure out how to host the model themselves.",
        "tools": [
            "javascript",
            "vuejs"
         ],
         "image": "project-images/aiapi.png"
    },
    {
        "key": 6,
        "title": "Chegg Scraper",
        "description": "A website I created in college that pulled study information from a popular website that could get around IP restrictions",
        "tools": [
            "javascript",
            "vuejs"
         ],
         "image": "project-images/cheggscraper.png"
    },
    {
        "key": 7,
        "title": "Home Server",
        "description": "For the past 8 years, I’ve always had a personal server that I maintain in my home. Currently I’m using FreeNas, though in the past I’ve used unRaid and Ubuntu Server. It hosts all my projects that require a backend, along with a personal cloud solution.",
        "tools": [
          
         ],
         "image": "project-images/homeserver.png"
    }

]